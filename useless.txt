
| FOR ID '=' ID TO ID DO_KW BEGIN_KW stmts END_KW         {$$=(struct StmtNode *) malloc(sizeof(struct StmtNode));
	                                                                     $$->isWhile=1;
                                                                        $$->isFunc = 0; 
                                                                        sprintf($$->initCode,"lw $t0, %s($t8)\nlw $t1, %s($t8)\n", $4->addr,$6->addr);
                                                                        sprintf($$->initJumpCode,"add $t0, 1, $t0\nbge $t0, $t1,");
                                                                        $$->down=$9;}

                                                                        



  VAR_KW stmts ';' '\n' 

program: 'program' TEXT ';' constants                  {$$ = $4;}

constants: 'const' assign variables        
        | variables                                     {$$ = $4;}

assign: VAR '=' exp ';'                                 {}
        |                                               {}

variables: 'var' define body                           {}
        | body

define: vars ':' TYPE ';' define                        {}
        |                                               {}

vars: VAR ',' vars                                      {}
        |                                               {}

body: 'function' VAR '(' define ')' : TYPE ';' 'begin' constants 'end' body 
        | 'procedure' VAR '(' define ')' : TYPE ';' 'begin' constants 'end' body
        | 'begin' stmts 'end'
        | 

stmts: stmt ';' stmts                                   
        | stmt
        |
        

/* Function block */
function: VAR'(' args ')' '{' stmts '}'          {printf("%s","ICameHERE  just function")}
;



arglist:  arglist ',' arg            {}
    | arg                            {}
    ;
arg:    VAR
;

/* Function Call Block */
functioncall :   VAR'('')'  {printf("ICameHERE  functioncall\n");$1->type = 1; }
               | VAR'('args')'  {printf("ICameHERE  functioncall\n");$1->type = 1; }

;



printf("ICameHERE  functioncall\n");$$=(struct StmtNode *) malloc(sizeof(struct StmtNode));
	    $$->isWhile=0;
       $$->isFunc=0;

	    char tmp[100];
       sprintf(tmp,"lw $t0, %s($t8)",$3->addr);
       sprintf($$->bodyCode,"%s\nsw $t0, %s($t8)\n\n",tmp,$1->addr);

	    $$->down=NULL;





// https://stackoverflow.com/questions/45186052/how-to-write-yacc-grammar-rules-to-identify-function-definitions-vs-function-cal

https://github.com/stardust95/TinyCompiler/blob/master/grammar.y
